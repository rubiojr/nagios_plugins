#!/usr/bin/ruby
# vim: filetype=ruby
#
# Check IBM Blade Temperature Sensors via SNMP
#
# Only SNMP v1 is supported
#
# http://www.oidview.com/mibs/2/BLADE-MIB.html
#
# Example:
#
# check_ibmblade_temp -H hostname [-w warning threshold] [-c critical threshold]
#

PLUGIN_VERSION = "1.0.2"

begin
  require 'rubygems'
  require 'snmp'
  require 'optparse'
rescue Exception => e
  puts "You need rubygems and snmp gem installed."
  puts e
  exit 4
end

def query(host)
  mm_temp = 0
  front_panel_temp = 0
  SNMP::Manager.open(:Host => host, :Version => :SNMPv1) do |snmp|
    val = snmp.get_value "1.3.6.1.4.1.2.3.51.2.2.1.1.2.0"
  #"1.3.6.1.4.1.2.3.51.2.2.1.5.1.0"])
    #
    mm_temp = val.split[0].to_f
    val = snmp.get_value "1.3.6.1.4.1.2.3.51.2.2.1.5.1.0"
    front_panel_temp = val.split[0].to_f
  end
  return mm_temp, front_panel_temp
end

if $0.eql? __FILE__
  opts = OptionParser.new do |opts|
    address = nil
    mmt_warning = 45
    mmt_critical = 50
    fpt_warning = 25
    fpt_critical = 30
    opts.on("-H", "--host ADDRESS", "Server hostname or address") do |o|
      address = o
    end
    opts.on("--mmt-warning WARNING", "MM Temperature WARNING threshold") do |o|
      mmt_warning = o.to_f
    end
    opts.on("--mmt-critical CRITICAL", "MM Temperature CRITICAL threshold") do |o|
      mmt_critical = o.to_f
    end
    opts.on("--fpt-warning WARNING", "Front Panel WARNING threshold") do |o|
      fpt_warning = o.to_f
    end
    opts.on("--fpt-critical CRITICAL", "Front Panel CRITICAL threshold") do |o|
      fpt_critical = o.to_f
    end
    opts.on("-v", "--version", "Show the plugin's version") do |o|
      puts "#{File.basename($0)} version #{PLUGIN_VERSION}"
      exit 0
    end
    opts.on_tail("-h", "--help", "Print this help.") do
      STDERR.puts opts
      STDERR.puts "\nDefault fpt thresholds: warn #{fpt_warning}, crit #{fpt_critical}"
      STDERR.puts "Default mmt thresholds: warn #{mmt_warning}, crit #{mmt_critical}"
      STDERR.puts "\nUsage:"
      STDERR.puts "check_ibmblade_temp -H hostname [--mmt-warning threshold] [--mmt-critical threshold] [--fpt-warning threshold] [--fpt-critical threshold]"
      exit
    end
    begin
      rest = opts.parse! ARGV
    rescue Exception => e
      puts "Error parsing arguments."
      puts e.message
      exit 4
    end
    mmt = 0
    fpt = 0
    if address.nil?
      STDERR.puts "Invalid host address."
      STDERR.puts opts
      exit 4
    else
      begin
        mmt, fpt = query(address)
      rescue Exception => e
        puts "Error retrieving data. #{e.message}"
      end
      if mmt == 0 and fpt == 0
        exit 3
      else
        status = [ 0 , "Ok" ]
        if mmt >= mmt_warning or fpt >= fpt_warning
          status = [ 1 , "WARNING" ]
        end
        if mmt >= mmt_critical or fpt >= fpt_critical
          status = [ 2 , "CRITICAL" ]
        end
        perf_data = "frontPanelTemp=#{fpt} mmTemp=#{mmt}"
        puts "Temp #{status[1]}. #{perf_data} | #{perf_data}"
        exit status[0]
      end
    end
  end
end

